{"version":3,"sources":["components/icongallery/IconGallery.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IconGallery","defaultIconSets","push","name","iconNames","Object","keys","GenesysDevIcons","filter","key","startsWith","useState","iconSets","setIconSets","filterText","setFilterText","useEffect","trim","newSet","forEach","iconSet","iconName","toLowerCase","includes","className","type","onChange","e","target","value","console","log","onClick","icon","AppTimes","map","Fragment","length","navigator","clipboard","writeText","AppCopy","App","iconVersion","dependencies","substr","href","BrandGithub","BrandNpm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62c677fd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GenesysDevIcon, GenesysDevIcons, GenesysDevIconsKey } from 'genesys-dev-icons';\n\nimport './IconGallery.scss';\n\ninterface IconSet {\n\tname: string;\n\ticonNames: GenesysDevIconsKey[];\n}\n\nexport default function IconGallery() {\n\tconst defaultIconSets = [] as IconSet[];\n\tdefaultIconSets.push({\n\t\tname: 'Application Icons',\n\t\ticonNames: Object.keys(GenesysDevIcons).filter((key) => key.startsWith('App')) as GenesysDevIconsKey[],\n\t});\n\tdefaultIconSets.push({\n\t\tname: 'Destination Icons',\n\t\ticonNames: Object.keys(GenesysDevIcons).filter((key) => key.startsWith('Dest')) as GenesysDevIconsKey[],\n\t});\n\tdefaultIconSets.push({\n\t\tname: 'Information Architecture Icons',\n\t\ticonNames: Object.keys(GenesysDevIcons).filter((key) => key.startsWith('Ia')) as GenesysDevIconsKey[],\n\t});\n\tdefaultIconSets.push({\n\t\tname: 'Brand Icons',\n\t\ticonNames: Object.keys(GenesysDevIcons).filter((key) => key.startsWith('Brand')) as GenesysDevIconsKey[],\n\t});\n\n\tconst [iconSets, setIconSets] = useState(defaultIconSets);\n\tconst [filterText, setFilterText] = useState('');\n\n\t// Filter icons\n\tuseEffect(() => {\n\t\tif (!filterText || filterText.trim() === '') return setIconSets(defaultIconSets);\n\t\tconst newSet = [...defaultIconSets];\n\t\tnewSet.forEach(\n\t\t\t(iconSet) =>\n\t\t\t\t(iconSet.iconNames = iconSet.iconNames.filter((iconName) => GenesysDevIcons[iconName].toLowerCase().includes(filterText)))\n\t\t);\n\t\tsetIconSets(newSet);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [filterText]);\n\n\treturn (\n\t\t<div className=\"icon-gallery\">\n\t\t\t<div className=\"filter-row\">\n\t\t\t\tFilter:{' '}\n\t\t\t\t<div className=\"text-input-container\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetFilterText(e.target.value);\n\t\t\t\t\t\t\tconsole.log(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvalue={filterText}\n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"button\" className=\"clear-button\" onClick={() => setFilterText('')}>\n\t\t\t\t\t\t<GenesysDevIcon icon={GenesysDevIcons.AppTimes} />\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{iconSets.map((iconSet) => (\n\t\t\t\t<React.Fragment key={iconSet.name}>\n\t\t\t\t\t<h2>{iconSet.name}</h2>\n\t\t\t\t\t<div className=\"icon-set\">\n\t\t\t\t\t\t{iconSet.iconNames.length === 0 ? <em>No icons match the filter</em> : ''}\n\t\t\t\t\t\t{iconSet.iconNames.map((iconName) => (\n\t\t\t\t\t\t\t<div key={iconName} className=\"icon-container\">\n\t\t\t\t\t\t\t\t<GenesysDevIcon icon={GenesysDevIcons[iconName]} />\n\t\t\t\t\t\t\t\t<span>{GenesysDevIcons[iconName]}</span>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tclassName=\"button button-primary\"\n\t\t\t\t\t\t\t\t\tonClick={() => navigator.clipboard.writeText(`<GenesysDevIcon icon={GenesysDevIcons.${iconName}} />`)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<GenesysDevIcon icon={GenesysDevIcons.AppCopy} /> Copy React\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\tclassName=\"button button-primary\"\n\t\t\t\t\t\t\t\t\tonClick={() => navigator.clipboard.writeText(`<i class=\"icon ${GenesysDevIcons[iconName]}\"></i>`)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<GenesysDevIcon icon={GenesysDevIcons.AppCopy} /> Copy HTML\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport './App.scss';\nimport './typography.scss';\nimport IconGallery from './components/icongallery/IconGallery';\nimport { dependencies } from '../package.json';\nimport { GenesysDevIcon, GenesysDevIcons } from 'genesys-dev-icons';\n\nfunction App() {\n\tlet iconVersion = (dependencies as any)['genesys-dev-icons'] || '';\n\tif (iconVersion.startsWith('^')) iconVersion = iconVersion.substr(1);\n\tif (iconVersion !== '') iconVersion = `v${iconVersion}`;\n\telse iconVersion = 'local build';\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app-content\">\n\t\t\t\t<h1>Genesys Dev Icon Pack</h1>\n\t\t\t\t<IconGallery />\n\t\t\t\t<div className=\"icon-version\">\n\t\t\t\t\t<em>genesys-dev-icons</em>\n\t\t\t\t\t<em>{iconVersion}</em>\n\t\t\t\t\t<div className=\"sources\">\n\t\t\t\t\t\t<a href=\"https://github.com/purecloudlabs/genesys-dev-icon-pack\">\n\t\t\t\t\t\t\t<GenesysDevIcon icon={GenesysDevIcons.BrandGithub} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"https://www.npmjs.com/package/genesys-dev-icons\">\n\t\t\t\t\t\t\t<GenesysDevIcon icon={GenesysDevIcons.BrandNpm} />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}